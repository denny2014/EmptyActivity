package com.zet.db;

import java.util.ArrayList;
import java.util.List;

import javax.mail.MessagingException;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.text.TextUtils;

import com.zet.email.ReciveOneMail;
import com.zet.model.DocInfo;
import com.zet.model.ReciveOneMailDB;

/**
 * 数据库工具类 Created by macchen on 15/4/10.
 */
public class SQLiteUtils {

	private static class SQLiteUtilsInstance {
		public static SQLiteUtils utils = new SQLiteUtils();
	}

	private static SQLiteDatabase database = null;

	private SQLiteUtils() {
	}

	/**
	 * 获取数据库单例
	 * 
	 * @param context
	 * @return
	 */
	public static SQLiteUtils getInstance(Context context) {
		if (database == null) {
			BaseSQLHelper helper = new BaseSQLHelper(context);
			database = helper.getWritableDatabase();
		}
		return SQLiteUtilsInstance.utils;
	}

	/**
	 * 添加邮件到数据库
	 * 
	 * @param info
	 * @return
	 */
	public long addEmailToDB(ReciveOneMail mReciveOneMail,
			boolean isContainAttach, String userid,String emailAddress,String appfileName) {
		ContentValues values = new ContentValues();
		try {
			values.put("userid", userid);
			values.put("subject", mReciveOneMail.getSubject());
			values.put("sentDate", mReciveOneMail.getSentDate());
			values.put("replysign", "" + mReciveOneMail.getReplySign());
			values.put("hasRead", "" + mReciveOneMail.isNew());
			values.put("containAttachment", "" + isContainAttach);
			values.put("form", mReciveOneMail.getFrom());
			values.put("topeople", mReciveOneMail.getMailAddress("to"));
			values.put("ccpeople", mReciveOneMail.getMailAddress("cc"));
			values.put("messageid", mReciveOneMail.getMessageId());
			values.put("bodycontent", mReciveOneMail.getBodyText());
			values.put("emailAddress", emailAddress);
			values.put("appfileName", appfileName);
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		long index =database.insert("emaillist", null, values);
		return index;
	}
	/**
	 * 更新数据库
	 * 
	 * @param fileId
	 * @return
	 */
	public int emailUpdate(String fileId) {
		ContentValues values = new ContentValues();
		values.put("hasRead", true);//key为字段名，value为值
		return database.update("emaillist", values , "userid = ?", new String[]{fileId});
	}
	/**
	 * 查询本地是否存在
	 * 
	 * @param fileId
	 * @return
	 */
	public boolean emailIsExist(String fileId , String emailAddress) {
		boolean isCollect = false;
		String select = "select * from  emaillist  where emailAddress = '"+emailAddress+"'  and userid = '" + fileId+"'";
//		Cursor cursor = database.query("emaillist", null, "userid=?",
//				new String[] { fileId }, null, null, null);
		Cursor cursor = database.rawQuery(select,null);
		if (cursor != null && cursor.getCount() > 0) {
			isCollect = true;
		}
		cursor.close();
		return isCollect;
	}

	/**
	 * 获取所有的邮件
	 * 
	 * @return
	 */
	@SuppressLint("NewApi")
	public List<ReciveOneMailDB> getEmailFromDb(int pageBagin, int pageEnd,
			String emailName, String keyWords,String emailAddress) {
		List<ReciveOneMailDB> list = new ArrayList<ReciveOneMailDB>();
		// select * from table WHERE … LIMIT 10,20; #返回第10-20行数据
		// +MessageColumn.email_yjId+" like '%"+SharedPreferencesUtils.getParam(context,
		// SharedPreferencesUtils.Email_name,
		// "testydbg2@jssz-n-tax.gov.cn")+"' and "
		// + MessageColumn.email_lblx + "=" + sdm + "  order by "
		String select = "select * from  emaillist  where emailAddress = '"+emailAddress+"'  subject like '%" + keyWords + "%'   order by  sentDate  desc";
		Cursor cursor = null;
		if (TextUtils.isEmpty(keyWords)) {
			cursor = database.query(false, "emaillist", null, null, null, null,
					null, "_id DESC", "" + pageBagin + "," + pageEnd, null);
		} else {
			cursor = database.rawQuery(select, null);
		}
		if (cursor != null && cursor.getCount() > 0) {
			while (cursor.moveToNext()) {
				ReciveOneMailDB info = new ReciveOneMailDB();
				info.setUserid(cursor.getString(cursor.getColumnIndex("userid")));
				info.setSubject(cursor.getString(cursor
						.getColumnIndex("subject")));
				info.setSentDate(cursor.getString(cursor
						.getColumnIndex("sentDate")));
				info.setReplysign(cursor.getString(cursor
						.getColumnIndex("replysign")));
				info.setHasRead(cursor.getString(cursor
						.getColumnIndex("hasRead")));
				info.setContainAttachment(cursor.getString(cursor
						.getColumnIndex("containAttachment")));
				info.setForm(cursor.getString(cursor.getColumnIndex("form")));
				info.setTopeople(cursor.getString(cursor
						.getColumnIndex("topeople")));
				info.setCcpeople(cursor.getString(cursor
						.getColumnIndex("ccpeople")));
				info.setMessageid(cursor.getString(cursor
						.getColumnIndex("messageid")));
				info.setBodycontent(cursor.getString(cursor
						.getColumnIndex("bodycontent")));
				info.setAppfileName(cursor.getString(cursor
								.getColumnIndex("appfileName")));
				list.add(info);
			}
		}
		cursor.close();
		return list;
	}

	/**
	 * 添加收藏
	 * 
	 * @param info
	 * @return
	 */
	public long addCollect(DocInfo info) {
		ContentValues values = new ContentValues();
		values.put("title", info.getTitle());
		values.put("docYear", info.getDocYear());
		values.put("fileID", info.getFileId());
		values.put("fileName", info.getFileName());
		values.put("fileheader", info.getFileHead());
		values.put("filesize", info.getFileSize());
		values.put("fileTitle", info.getFileTitle());
		values.put("fileNo", info.getFileNo());
		values.put("setYear", info.getSetYear());
		return database.insert("collection", null, values);

	}

	/**
	 * 删除收藏
	 * 
	 * @param id
	 * @return
	 */
	public int delCollect(int id) {
		return database.delete("collection", "_id=?", new String[] { id + "" });
	}

	/**
	 * 删除收藏
	 * 
	 * @param fileId
	 * @return
	 */
	public int delCollect(String fileId) {
		return database.delete("collection", "fileID=?",
				new String[] { fileId });
	}

	/**
	 * 是否收藏
	 * 
	 * @param fileId
	 * @return
	 */
	public boolean isCollect(String fileId) {
		boolean isCollect = false;
		Cursor cursor = database.query("collection", null, "fileID=?",
				new String[] { fileId }, null, null, null);
		if (cursor != null && cursor.getCount() > 0) {
			isCollect = true;
		}
		cursor.close();
		return isCollect;
	}

	/**
	 * 获取所有的收藏
	 * 
	 * @return
	 */
	public List<DocInfo> getCollect() {
		List<DocInfo> list = new ArrayList<DocInfo>();
		Cursor cursor = database.query("collection", null, null, null, null,
				null, "_id DESC");
		if (cursor != null && cursor.getCount() > 0) {
			while (cursor.moveToNext()) {
				DocInfo info = new DocInfo();
				info.setDocYear(cursor.getString(cursor
						.getColumnIndex("docYear")));
				info.setTitle(cursor.getString(cursor.getColumnIndex("title")));
				info.setFileId(cursor.getString(cursor.getColumnIndex("fileID")));
				info.setId(cursor.getInt(cursor.getColumnIndex("_id")));
				info.setFileName(cursor.getString(cursor
						.getColumnIndex("fileName")));
				info.setFileHead(cursor.getString(cursor
						.getColumnIndex("fileheader")));
				info.setFileSize(cursor.getInt(cursor
						.getColumnIndex("filesize")));
				info.setFileTitle(cursor.getString(cursor
						.getColumnIndex("fileTitle")));
				info.setFileNo(cursor.getString(cursor.getColumnIndex("fileNo")));
				info.setSetYear(cursor.getString(cursor
						.getColumnIndex("setYear")));
				list.add(info);
			}
		}
		cursor.close();
		return list;
	}

	/**
	 * 添加查看记录
	 * 
	 * @param info
	 * @return
	 */
	/*
	 * public long addRecord(DocInfo info) { ContentValues values = new
	 * ContentValues(); values.put("title", info.getTitle());
	 * values.put("docYear", info.getDocYear()); values.put("fileID",
	 * info.getFileId()); values.put("fileName", info.getFileName());
	 * values.put("fileheader", info.getFileHead()); values.put("filesize",
	 * info.getFileSize()); values.put("fileTitle", info.getFileTitle());
	 * values.put("fileNo", info.getFileName()); values.put("setYear",
	 * info.getSetYear()); values.put("add_time", System.currentTimeMillis());
	 * return database.insert("record", null, values); }
	 */

	/**
	 * 删除查看记录
	 * 
	 * @param id
	 * @return
	 */
	/*
	 * public int delRecord(int id) { return database.delete("record", "_id=?",
	 * new String[]{id + ""}); }
	 */

	/**
	 * 删除查看记录
	 * 
	 * @param fileId
	 * @return
	 */
	/*
	 * public int delRecord(String fileId) { return database.delete("record",
	 * "fileID=?", new String[]{fileId}); }
	 */

	/**
	 * 是否查看过
	 * 
	 * @param fileId
	 * @return
	 */
	/*
	 * public boolean isRecord(String fileId) { boolean isCollect = false;
	 * Cursor cursor = database.query("record", null, "fileID=?", new
	 * String[]{fileId}, null, null, null); if (cursor != null &&
	 * cursor.getCount() > 0) { isCollect = true; } cursor.close(); return
	 * isCollect; }
	 */

	/**
	 * 获取所有的记录
	 * 
	 * @return
	 */
	/*
	 * public List<RecordInfo> getAllRecord() { List<RecordInfo> list = new
	 * ArrayList<RecordInfo>(); Cursor cursor = database.query("collection",
	 * null, null, null, null, null, null); if (cursor != null &&
	 * cursor.getCount() > 0) { while (cursor.moveToNext()) { RecordInfo info =
	 * new RecordInfo();
	 * info.setDocYear(cursor.getString(cursor.getColumnIndex("docYear")));
	 * info.setTitle(cursor.getString(cursor.getColumnIndex("title")));
	 * info.setFileId(cursor.getString(cursor.getColumnIndex("fileID")));
	 * info.setId(cursor.getInt(cursor.getColumnIndex("_id")));
	 * info.setFileName(cursor.getString(cursor.getColumnIndex("fileName")));
	 * info.setFileHead(cursor.getString(cursor.getColumnIndex("fileheader")));
	 * info.setFileSize(cursor.getInt(cursor.getColumnIndex("filesize")));
	 * info.setFileTitle(cursor.getString(cursor.getColumnIndex("fileTitle")));
	 * info.setFileNo(cursor.getString(cursor.getColumnIndex("fileNo")));
	 * info.setSetYear(cursor.getString(cursor.getColumnIndex("setYear")));
	 * info.setAddTime(cursor.getLong(cursor.getColumnIndex("add_time")));
	 * list.add(info); } } cursor.close(); return list; }
	 */

	/**
	 * 关闭数据库
	 */
	public void closeDatabase() {
		if (database != null) {
			database.close();
			database = null;
		}
	}

}
