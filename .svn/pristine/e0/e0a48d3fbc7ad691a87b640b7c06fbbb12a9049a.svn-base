package com.zet.activity;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.TextView;
import com.bdkj.bdlibrary.utils.*;
import com.lidroid.xutils.annotation.ContentView;
import com.lidroid.xutils.annotation.ViewInject;
import com.lidroid.xutils.event.OnClick;
import com.lidroid.xutils.utils.LogUtils;
import com.zet.*;
import com.zet.adapter.SearchResultAdapter;
import com.zet.asyncHandler.DocHandler;
import com.zet.db.SQLiteUtils;
import com.zet.model.DocInfo;
import com.zet.model.UserInfo;
import com.zet.net.BaseNetHandler;
import com.zet.net.HandlerFactory;
import com.zet.net.INetProxy;
import com.zet.pull.PullToRefreshLayout;
import com.zet.pull.PullableListView;
import com.zet.utils.PdfUtils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * 搜索列表界面
 * Created by macchen on 15/4/3.
 */
@ContentView(R.layout.activity_search_list)
public class SearchListActivity extends BaseActivity implements AdapterView.OnItemClickListener {

    private String docType = null;
    @ViewInject(R.id.lv_content_view)
    PullableListView listView;
    @ViewInject(R.id.tv_department)
    TextView tvDepartment;
    @ViewInject(R.id.tv_serarch_year)
    TextView tvYear;
    @ViewInject(R.id.et_search_number)
    EditText etNumber;
    @ViewInject(R.id.refresh_view)
    PullToRefreshLayout layout;
    @ViewInject(R.id.etKey)
    EditText etKey;

    /**
     * 部门请求
     */
    private final int DEPART_REQUEST = 1;
    /**
     * 年代请求
     */
    private final int YEAR_REQUEST = 2;

    /**
     * 每页的条数
     */
    private int pagesize = 50;
    /**
     * 页码
     */
    private int page = 1;

    private String departCode = "";
    private String year = "";
    /**
     * 搜索的关键词
     */
    private String keyWord = "";

    /**
     * 文号
     */
    private String number = "";

    /**
     * 是否是线上数据（表示线上,0表示本地)
     */
    private int online = 1;//线上

    private SearchResultAdapter adapter;

    private UserInfo userInfo;

    /**
     * 当前是否显示的是收藏的数据
     */
    private boolean isCollect = false;

    /**
     * 收藏切换时缓存下来的数据
     */
    private List<DocInfo> cacheData = new ArrayList<DocInfo>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (savedInstanceState != null) {
            docType = savedInstanceState.getString("docType");
        } else {
            docType = getIntent().getStringExtra("docType");
        }
        if (docType == null)
            finish();
        layout.setOnRefreshListener(new MyListener());
        Object object = SerializeUtils.readObject(new File(getCacheDir(), "user.info"));
        if (object != null) {
            userInfo = (UserInfo) object;
            HttpUtils.get(mContext, Constants.SERVER_URL, ZetParams.getSearchList(keyWord, userInfo.getAdmdivCode(), userInfo.getDivCode(), departCode, number, year, userInfo.getUserId(), docType, pagesize + "", ((page - 1) * pagesize) + "", online + ""), HandlerFactory.getHandler(DocHandler.class, new BaseNetHandler(new INetProxy(mContext, this), Constants.SEARCH_ACTION)));
        } else {
            listView.setCanPullUp(false);
            listView.setCanPullDown(false);
        }
        listView.setOnItemClickListener(this);
        adapter = new SearchResultAdapter(new ArrayList<DocInfo>());
        listView.setAdapter(adapter);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putString("docType", docType);
    }

    /**
     * 重新加载
     */
    public void reload() {
        page = 1;
        adapter.getList().clear();
        adapter.notifyDataSetChanged();
        listView.setCanPullDown(true);
        LogUtils.e("---" + Constants.SERVER_URL + ZetParams.getSearchList(keyWord, userInfo.getAdmdivCode(), userInfo.getDivCode(), departCode, number, year, userInfo.getUserId(), docType, pagesize + "", ((page - 1) * pagesize) + "", online + "").toString());
        HttpUtils.get(mContext, Constants.SERVER_URL, ZetParams.getSearchList(keyWord, userInfo.getAdmdivCode(), userInfo.getDivCode(), departCode, number, year, userInfo.getUserId(), docType, pagesize + "", ((page - 1) * pagesize) + "", online + ""), HandlerFactory.getHandler(DocHandler.class, new BaseNetHandler(new INetProxy(mContext, SearchListActivity.this), Constants.SEARCH_ACTION)));
    }

    @OnClick({R.id.iv_collect, R.id.iv_help, R.id.tv_back, R.id.btn_search, R.id.tv_department, R.id.tv_serarch_year, R.id.iv_goto_top, R.id.btn_search})
    public void onClick(View v) {
        KeyBoardUtils.hideKeyBoard(this);
        switch (v.getId()) {
            case R.id.iv_collect:
                if(isCollect)
                    return;
                List<DocInfo> list = SQLiteUtils.getInstance(mContext).getCollect();
                cacheData = adapter.getList();
                adapter.setList(list);
                listView.setCanPullUp(false);
                listView.setCanPullDown(false);
                adapter.notifyDataSetChanged();
                isCollect = true;
                break;
            case R.id.iv_help:
                if (!StorageUtils.isMount()) {
                    ToastUtils.showWarn(mContext, R.string.activity_sdcard_not_mount);
                } else {
                    File file = new File(StorageUtils.getStorageFile(), Constants.ROOT_DIRECTION + "/userGuide.pdf");
                    if (!file.exists()) {
                        boolean success = false;
                        FileUtils.createFolder(file.getParentFile());
                        FileUtils.createFile(file);
                        InputStream stream = null;
                        try {
                            stream = mContext.getAssets().open("userGuide.pdf");
                            FileUtils.writeFile(file, stream);
                            success = true;
                        } catch (IOException e) {
                            e.printStackTrace();
                        } finally {
                            if (stream != null) {
                                try {
                                    stream.close();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                        if (success) {
                            PdfUtils.openPDF(mContext, file.getAbsolutePath());
                        } else {
                            ToastUtils.showError(mContext, R.string.open_pdf_fail);
                            FileUtils.deleteFile(file);
                        }
                    } else {
                        PdfUtils.openPDF(mContext, file.getAbsolutePath());
                    }
                }
                break;
            case R.id.tv_back:
                if (isCollect) {
                    adapter.setList(cacheData);
                    adapter.notifyDataSetChanged();
                    listView.setCanPullDown(true);
                    listView.setCanPullUp(true);
                    isCollect = false;
                } else {
                    finish();
                }
                break;
            case R.id.tv_department:
                Bundle departBunld = new Bundle();
                departBunld.putInt("selectItem", 0);
                ApplicationContext.showSelect(mContext, departBunld, DEPART_REQUEST);
                break;
            case R.id.tv_serarch_year:
                Bundle yearBunld = new Bundle();
                yearBunld.putInt("selectItem", 1);
                ApplicationContext.showSelect(mContext, yearBunld, YEAR_REQUEST);
                break;
            case R.id.iv_goto_top:
                listView.setSelection(0);
                break;
            case R.id.btn_search:
                String snumber = etNumber.getText().toString();
                String skeyword = etKey.getText().toString();
                KeyBoardUtils.hideKeyBoard(SearchListActivity.this);
                if (userInfo != null) {
                    keyWord = skeyword;
                    number = snumber;
                    reload();
                }
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case DEPART_REQUEST:
                    String departName = data.getStringExtra("depart_name");
                    String redepartCode = data.getStringExtra("depart_code");
                    tvDepartment.setText(departName);
                    departCode = redepartCode;
                    if (userInfo != null) {
                        reload();
                    }
                    break;
                case YEAR_REQUEST:
                    String mYear = data.getStringExtra("year");
                    if (getString(R.string.activity_search_all_year).equals(mYear)) {
                        year = "";
                    } else {
                        year = mYear;
                    }
                    tvYear.setText(mYear);
                    if (userInfo != null) {
                        reload();
                    }
                    break;
            }
        }
    }

    @Override
    public boolean success(String type, Object objects) {
        Object[] data = (Object[]) objects;
        if (type.equals(Constants.SEARCH_ACTION)) {
            List<DocInfo> list = (List<DocInfo>) data[1];
            if (page == 1) {
                layout.refreshFinish(PullToRefreshLayout.SUCCEED);
                adapter.getList().clear();
            } else {
                layout.loadmoreFinish(PullToRefreshLayout.SUCCEED);
            }
            adapter.getList().addAll(list);
            adapter.notifyDataSetChanged();
            listView.setSelection(pagesize * (page - 1));
            listView.setCanPullUp(list.size() >= pagesize);
//            if (list.size() < pagesize) {
//                ToastUtils.show(mContext, R.string.activity_search_not_data);
//            }
            isCollect = false;

        }
        return super.success(type, objects);
    }

    @Override
    public boolean failure(String type, Object objects) {
        if (page == 1) {
            layout.refreshFinish(PullToRefreshLayout.FAIL);
        } else {
            layout.loadmoreFinish(PullToRefreshLayout.FAIL);
        }
        return super.failure(type, objects);
    }

    @Override
    public boolean dataFailure(String type, Object objects) {
        if (type.equals(Constants.SEARCH_ACTION)) {
            if (page == 1) {
                layout.refreshFinish(PullToRefreshLayout.FAIL);
            } else {
                layout.loadmoreFinish(PullToRefreshLayout.FAIL);
            }

        }
        return super.dataFailure(type, objects);
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        DocInfo info = (DocInfo) adapter.getItem(position);
        Bundle bundle = new Bundle();
        bundle.putSerializable("docInfo", info);
        ApplicationContext.showDetail(this, bundle);
        info.setIsLook(true);
        //adapter.notifyDataSetChanged();
        SearchResultAdapter.ViewHolder holder = (SearchResultAdapter.ViewHolder) view.getTag();
        holder.tvName.setTextColor(Color.GRAY);

    }

    class MyListener implements PullToRefreshLayout.OnRefreshListener {

        @Override
        public void onRefresh(final PullToRefreshLayout pullToRefreshLayout) {
            // 下拉刷新操作
            doRefresh(true);
        }

        @Override
        public void onLoadMore(final PullToRefreshLayout pullToRefreshLayout) {
            // 加载操作
            doRefresh(false);
        }

    }

    public void doRefresh(boolean isRefresh) {
        if (isRefresh)
            page = 1;
        else
            page++;
        if (userInfo != null) {
            HttpUtils.get(mContext, Constants.SERVER_URL, ZetParams.getSearchList(keyWord, userInfo.getAdmdivCode(), userInfo.getDivCode(), departCode, number, year, userInfo.getUserId(), docType, pagesize + "", ((page - 1) * pagesize) + "", online + ""), HandlerFactory.getHandler(DocHandler.class, new BaseNetHandler(this, Constants.SEARCH_ACTION)));
        }
    }

}